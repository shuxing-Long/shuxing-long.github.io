<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>零的学习笔记</title>
    <link>https://shuxing-long.github.io/</link>
    <description>Recent content on 零的学习笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Thu, 03 Jun 2021 08:42:39 +0800</lastBuildDate><atom:link href="https://shuxing-long.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Creating a New Theme</title>
      <link>https://shuxing-long.github.io/posts/2014/09/creating-a-new-theme/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://shuxing-long.github.io/posts/2014/09/creating-a-new-theme/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>https://shuxing-long.github.io/posts/2014/03/migrate-to-hugo-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://shuxing-long.github.io/posts/2014/03/migrate-to-hugo-from-jekyll/</guid>
      <description>Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png  should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png  Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description>
    </item>
    
    <item>
      <title>SQL理论</title>
      <link>https://shuxing-long.github.io/blog/sqltheory/</link>
      <pubDate>Thu, 03 Jun 2021 08:42:39 +0800</pubDate>
      
      <guid>https://shuxing-long.github.io/blog/sqltheory/</guid>
      <description>1.触发器的作业： 触发器是一种特殊的存储过程，主要是通过事件来触发而被执行的。它可以强化约束，来维护数据的完整性和一致性， 可以跟踪数据库内的操作从而不允许未经可许的更新和变化。可以联级运算。如，某表上的触发器上包含对另一个表 的数据操作，而该操作又会导致该表触发器被触发。  2.什么是存储过程？用什么来调用： 存储过程是一个预编译的SQL语句，优点是允许模块化的设计，就是说只需建立一次，以后在该程序中就可以调用多次。 如果某次操作需要执行多次SQL,使用存储过程比单纯SQL语句执行要快。可以用一个命令对象来调用存储过程。  3.索引的作用？和它的优点和缺点： 索引就是一种特殊的查询表，数据库的搜索引擎可以利用它加速对数据的检索。它很类似与现实生活中书的目录，不需要查询 整本书内容就可以找到想要的数据，索引可以是唯一的创建索引允许单个列或者是多个列。缺点是它减慢了数据录入的速度，同时也增加了数据库的尺寸大小。  4.主键和索引的区别： (1).主键时为标识数据库记录的唯一性，不允许记录重复，且键值不能为空，主键也是一个特殊索引; (2).数据表中只允许有一个主键，但是可以有多个索引; (3).使用主键数据库会自动创建主索引，也可以在非主键上创建索引，方便查询效率; (4).索引可以提高查询速度，它就相当与在字典的目录，可以通过它很快查询到想要的结果，而不需要进行全表扫描; (5).主键也可以由多个字段组成，组成复合主键，同时主键肯定也是唯一索引; (6).唯一索引则标识该索引值唯一，可以由一个或几个字段组成，一个表可以有多个唯一索引;  5.什么是内存泄漏： 一般我们所说的内存泄漏指的是堆内存的泄漏。堆内存是程序从堆中为其分配的，大小任意的，使用完后要显示释放内存。当应用程序关键字new等创建对象时，就从堆中为它分配一块内存，使用完后程序调用free或者delete释放该内存，否则就说该内存就不能被使用，我们就说该内存被泄漏了。  6.维护数据库的完整性和一致性，你喜欢用触发器还是自写业务逻辑？为什么： 尽可能使用约束，如check,主键，外键，非空字段等来约束，这样做效率最高，也最方便。其次是使用触发器，这种方法可以保证，无论什么业务系统访问数据库都可以保证数据的完整性和一致性。最后考虑的是自写业务逻辑，但这样做麻烦，编写复杂，效率低下。  7.什么是事务： 事务就是被绑定在一起作为一个逻辑工作单元的SQL语句分组，如果任何一个语句操作失败那么整个就被失败，以后操作就会回滚到操作状态，或者是上有一个 </description>
    </item>
    
    <item>
      <title>Js_5</title>
      <link>https://shuxing-long.github.io/jsxx/js_5/</link>
      <pubDate>Fri, 26 Mar 2021 09:54:35 +0800</pubDate>
      
      <guid>https://shuxing-long.github.io/jsxx/js_5/</guid>
      <description></description>
    </item>
    
    <item>
      <title>ASPnet_2</title>
      <link>https://shuxing-long.github.io/asp.net_web/aspnet_2/</link>
      <pubDate>Tue, 23 Mar 2021 08:44:37 +0800</pubDate>
      
      <guid>https://shuxing-long.github.io/asp.net_web/aspnet_2/</guid>
      <description></description>
    </item>
    
    <item>
      <title>MVC</title>
      <link>https://shuxing-long.github.io/blog/mvc/</link>
      <pubDate>Mon, 22 Mar 2021 14:21:19 +0800</pubDate>
      
      <guid>https://shuxing-long.github.io/blog/mvc/</guid>
      <description>点击下面查看笔记</description>
    </item>
    
    <item>
      <title>学习js</title>
      <link>https://shuxing-long.github.io/blog/js/</link>
      <pubDate>Mon, 22 Mar 2021 14:21:19 +0800</pubDate>
      
      <guid>https://shuxing-long.github.io/blog/js/</guid>
      <description>点击下面查看笔记</description>
    </item>
    
    <item>
      <title>学习js第一章</title>
      <link>https://shuxing-long.github.io/jsxx/js_1/</link>
      <pubDate>Mon, 22 Mar 2021 11:51:49 +0800</pubDate>
      
      <guid>https://shuxing-long.github.io/jsxx/js_1/</guid>
      <description></description>
    </item>
    
    <item>
      <title>MVC错题笔记</title>
      <link>https://shuxing-long.github.io/mvc/mvc/</link>
      <pubDate>Tue, 02 Feb 2021 11:51:49 +0800</pubDate>
      
      <guid>https://shuxing-long.github.io/mvc/mvc/</guid>
      <description>1.在Asp.net mvc中如何获取上传文件保存的路径？ A.通过File类获取磁盘路径。答案：B.通过Server.MapPath()获取服务器路径。C.通过Directory获取磁盘目录。D.直接使用绝对路径。 2.在ASP.net mvc中，选项中那个辅助方法可以生成如下代码? A.Html.select()B.Html.CheckBox()C.Html.TextBox()答案：D.Html.DropDownList() 3.在ASP .NET MVC中，以下对于强类型理解错误的是？ A.强类型的使用可以提高开发视图的效率和精准度。B.强类型即在变量定义时已明确指定其类型，最经典的应用是结合视图。答案：C.@model关键字指定属性Property的值。D.Razor视图可以智能感知，可直接访问强类型对象的属性。 4.以下MVC执行流程正确的是？ 答案：浏览器请求》模型》控制器》视图》显示结果 5.ASP.Net MVC 所有的HtmlHelper扩展方法所在命名空间为？ 答案:System.web.Mvc.html 6.asp.net mvc中，下列那个辅助方法可以输出&amp;lt;input type=&amp;ldquo;text&amp;rdquo; 答案:html.textbox() 7.在asp.net mvc中，以下关于强类型说法正确的是？ A.object类型就属于&amp;quot;强类型&amp;quot;B.视图中的Model属性不可以由视图代码直接访问，并且为动态类型。答案：C.强类型声明的写法是在视图中用@model关键字指定Model属性的类型。D.强类型指的是变量在定义时已经明确指定其类型，如：var age; 8.在asp.net mvc中，下列关于支架模板说法错误的是？ A.支架模板它结合数据模型对象，自动生成支持增删改查的视图和控制器代码提高了开发效率。答案：B.&amp;quot;支架&amp;quot;模板功能需要我们手动完成视图代码编写。C.&amp;quot;支架&amp;quot;模板功能只能在强类型视图基础上使用。D.&amp;quot;支架&amp;quot;模板功能不能满足复杂的业务需求，仍然需要进行手动编码完成复杂业务处理。 9.在asp.net mvc中，关于ajax辅助方法，下列理解错误的是？ 答案：A.Ajax辅助方法与服务器采用的是Ajax(同步交互)方式。B.使用Ajax辅助方法必须先引入Jquer.unobtrusive-ajax,js。C.当使用Ajax辅助方法时，无须编写任何脚本代码即可实现程序的异步性。D.Ajax辅助方法通过&amp;quot;@Ajax&amp;quot;进行调用。 </description>
    </item>
    
    <item>
      <title>第一章</title>
      <link>https://shuxing-long.github.io/asp.net_web/asp.nwt_1/</link>
      <pubDate>Tue, 02 Feb 2021 11:51:49 +0800</pubDate>
      
      <guid>https://shuxing-long.github.io/asp.net_web/asp.nwt_1/</guid>
      <description>1.1 web应用程序大概有两种：静态网页和动态网页。 静态网页的工作流程：
 响应 -------------------------------------------------------------- | | | ---------------------------- 浏览器--------------&amp;gt;网络-------------------------&amp;gt; | web服务器&amp;lt;-------&amp;gt;静态页面 | 请求 ---------------------------- 动态网页的工作流程：
 响应 -------------------------------------------------------------- | | | ---------------------------- 浏览器--------------&amp;gt;网络-------------------------&amp;gt; | web服务器&amp;lt;-------&amp;gt;静态页面 | 请求 | | | | |-&amp;gt;动态脚本 | | | 程序 ---&amp;gt;数据库 | |（JSP,ASP) | ---------------------------- 1.2 HTTP协议 URL:URL是Uniform Resource Locator的缩写，表示统一的资源定位器，是专为标识网络上的 资源位置而设定的一种编码地址方式。
URL格式：
 应用层协议://主机IP地址或域名/资源所在路径/文件名 总结 web应用程序二点工作原理是什么： 1.用户在浏览器输入网址或点击按钮提交请求 2.浏览器以HTTP协议的规定把请求传输到服务器中，服务器处理信息，再回传到用户浏览器中
HTTP的请求方式有那行：
1.post和get</description>
    </item>
    
  </channel>
</rss>
